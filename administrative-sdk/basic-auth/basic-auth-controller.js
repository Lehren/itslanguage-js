import BasicAuth from './basic-auth';

/**
 * Controller class for the {@link BasicAuth} model.
 */
export default class BasicAuthController {
  /**
   * @param {Connection} connection - Object to use for making a connection to the REST API and Websocket server.
   */
  constructor(connection) {
    /**
     * Object to use for making a connection to the REST API and Websocket server.
     * @type {Connection}
     */
    this._connection = connection;
  }

  /**
   * Create a basic authorization for a {@link Tenant}.
   * By creating a {@link BasicAuth} you can register credentials to a {@link Tenant},
   * allowing yourself to retrieve the {@link Tenant} at a later date.
   *
   * @param {BasicAuth} basicAuth - Object to create.
   * @returns {Promise} Promise containing the newly created object.
   * @throws {Promise} If the server returned an error.
   */
  createBasicAuth(basicAuth) {
    const url = this._connection.settings.apiUrl + '/basicauths';
    const formData = JSON.stringify(basicAuth);
    const headers = new Headers();
    if (typeof formData === 'string') {
      headers.append('Content-Type',
        'application/json; charset=utf-8');
    }
    const options = {
      method: 'POST',
      headers,
      body: formData
    };
    return fetch(url, options)
      .then(response =>
        response.text()
          .then(textResponse => {
            if (!textResponse) {
              return Promise.reject(response.status + ': ' + response.statusText);
            }
            const result = JSON.parse(textResponse);
            if (response.ok) {
              return result;
            }
            return Promise.reject(result);
          })
      )
      .then(data => {
        const result = new BasicAuth(data.tenantId, data.principal, basicAuth.credentials);
        result.created = new Date(data.created);
        result.updated = new Date(data.updated);
        // Credentials are only supplied when generated by the backend.
        if (data.credentials) {
          result.credentials = data.credentials;
        }
        return result;
      });
  }
}
